;;; ----------------------------------------------------------------------------
;;; gtk.status-bar.lisp
;;;
;;; Copyright (C) 2011 Dr. Dieter Kaiser
;;;
;;; This file contains code from a fork of cl-gtk2 from
;;; http://common-lisp.net/project/cl-gtk2/
;;;
;;; The documentation has been copied from the GTK 2.2.2 Reference Manual
;;; See http://www.gtk.org.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;;; ----------------------------------------------------------------------------
;;;
;;; GtkStatusbar
;;; 
;;; GtkStatusbar â€” Report messages of minor importance to the user
;;; 	
;;; Synopsis
;;; 
;;; #include <gtk/gtk.h>
;;; 
;;; struct              GtkStatusbar;
;;; GtkWidget *         gtk_statusbar_new                   (void);
;;; guint               gtk_statusbar_get_context_id        (GtkStatusbar *statusbar,
;;;                                                          const gchar *context_description);
;;; guint               gtk_statusbar_push                  (GtkStatusbar *statusbar,
;;;                                                          guint context_id,
;;;                                                          const gchar *text);
;;; void                gtk_statusbar_pop                   (GtkStatusbar *statusbar,
;;;                                                          guint context_id);
;;; void                gtk_statusbar_remove                (GtkStatusbar *statusbar,
;;;                                                          guint context_id,
;;;                                                          guint message_id);
;;; void                gtk_statusbar_remove_all            (GtkStatusbar *statusbar,
;;;                                                          guint context_id);
;;; GtkWidget *         gtk_statusbar_get_message_area      (GtkStatusbar *statusbar);
;;; 
;;; Object Hierarchy
;;; 
;;;   GObject
;;;    +----GInitiallyUnowned
;;;          +----GtkWidget
;;;                +----GtkContainer
;;;                      +----GtkBox
;;;                            +----GtkStatusbar
;;; 
;;; Implemented Interfaces
;;; 
;;; GtkStatusbar implements AtkImplementorIface, GtkBuildable and GtkOrientable.
;;; Style Properties
;;; 
;;;   "shadow-type"              GtkShadowType         : Read
;;; 
;;; Signals
;;; 
;;;   "text-popped"                                    : Run Last
;;;   "text-pushed"                                    : Run Last
;;; 
;;; Description
;;; 
;;; A GtkStatusbar is usually placed along the bottom of an application's main
;;; GtkWindow. It may provide a regular commentary of the application's status
;;; (as is usually the case in a web browser, for example), or may be used to
;;; simply output a message when the status changes, (when an upload is complete
;;; in an FTP client, for example).
;;; 
;;; Status bars in GTK+ maintain a stack of messages. The message at the top of
;;; the each bar's stack is the one that will currently be displayed.
;;; 
;;; Any messages added to a statusbar's stack must specify a context id that is
;;; used to uniquely identify the source of a message. This context id can be
;;; generated by gtk_statusbar_get_context_id(), given a message and the
;;; statusbar that it will be added to. Note that messages are stored in a
;;; stack, and when choosing which message to display, the stack structure is
;;; adhered to, regardless of the context identifier of a message.
;;; 
;;; One could say that a statusbar maintains one stack of messages for display
;;; purposes, but allows multiple message producers to maintain sub-stacks of
;;; the messages they produced (via context ids).
;;; 
;;; Status bars are created using gtk_statusbar_new().
;;; 
;;; Messages are added to the bar's stack with gtk_statusbar_push().
;;; 
;;; The message at the top of the stack can be removed using
;;; gtk_statusbar_pop(). A message can be removed from anywhere in the stack if
;;; its message id was recorded at the time it was added. This is done using
;;; gtk_statusbar_remove().
;;; ----------------------------------------------------------------------------

(in-package :gtk)

;;; ----------------------------------------------------------------------------
;;; struct GtkStatusbar
;;; 
;;; struct GtkStatusbar;
;;; ----------------------------------------------------------------------------

;;; ----------------------------------------------------------------------------
;;; gtk_statusbar_new ()
;;; 
;;; GtkWidget *         gtk_statusbar_new                   (void);
;;; 
;;; Creates a new GtkStatusbar ready for messages.
;;; 
;;; Returns :
;;; 	the new GtkStatusbar
;;; gtk_statusbar_get_context_id ()
;;; 
;;; guint               gtk_statusbar_get_context_id        (GtkStatusbar *statusbar,
;;;                                                          const gchar *context_description);
;;; 
;;; Returns a new context identifier, given a description of the actual context. Note that the description is not shown in the UI.
;;; 
;;; statusbar :
;;; 	a GtkStatusbar
;;; 
;;; context_description :
;;; 	textual description of what context the new message is being used in
;;; 
;;; Returns :
;;; 	an integer id
;;; gtk_statusbar_push ()
;;; 
;;; guint               gtk_statusbar_push                  (GtkStatusbar *statusbar,
;;;                                                          guint context_id,
;;;                                                          const gchar *text);
;;; 
;;; Pushes a new message onto a statusbar's stack.
;;; 
;;; statusbar :
;;; 	a GtkStatusbar
;;; 
;;; context_id :
;;; 	the message's context id, as returned by gtk_statusbar_get_context_id()
;;; 
;;; text :
;;; 	the message to add to the statusbar
;;; 
;;; Returns :
;;; 	a message id that can be used with gtk_statusbar_remove().
;;; gtk_statusbar_pop ()
;;; 
;;; void                gtk_statusbar_pop                   (GtkStatusbar *statusbar,
;;;                                                          guint context_id);
;;; 
;;; Removes the first message in the GtkStatusBar's stack with the given context id.
;;; 
;;; Note that this may not change the displayed message, if the message at the top of the stack has a different context id.
;;; 
;;; statusbar :
;;; 	a GtkStatusBar
;;; 
;;; context_id :
;;; 	a context identifier
;;; gtk_statusbar_remove ()
;;; 
;;; void                gtk_statusbar_remove                (GtkStatusbar *statusbar,
;;;                                                          guint context_id,
;;;                                                          guint message_id);
;;; 
;;; Forces the removal of a message from a statusbar's stack. The exact context_id and message_id must be specified.
;;; 
;;; statusbar :
;;; 	a GtkStatusBar
;;; 
;;; context_id :
;;; 	a context identifier
;;; 
;;; message_id :
;;; 	a message identifier, as returned by gtk_statusbar_push()
;;; gtk_statusbar_remove_all ()
;;; 
;;; void                gtk_statusbar_remove_all            (GtkStatusbar *statusbar,
;;;                                                          guint context_id);
;;; 
;;; Forces the removal of all messages from a statusbar's stack with the exact context_id.
;;; 
;;; statusbar :
;;; 	a GtkStatusBar
;;; 
;;; context_id :
;;; 	a context identifier
;;; 
;;; Since 2.22
;;; gtk_statusbar_get_message_area ()
;;; 
;;; GtkWidget *         gtk_statusbar_get_message_area      (GtkStatusbar *statusbar);
;;; 
;;; Retrieves the box containing the label widget.
;;; 
;;; statusbar :
;;; 	a GtkStatusBar
;;; 
;;; Returns :
;;; 	a GtkBox. [transfer none]
;;; 
;;; Since 2.20
;;; Style Property Details
;;; The "shadow-type" style property
;;; 
;;;   "shadow-type"              GtkShadowType         : Read
;;; 
;;; Style of bevel around the statusbar text.
;;; 
;;; Default value: GTK_SHADOW_IN
;;; Signal Details
;;; The "text-popped" signal
;;; 
;;; void                user_function                      (GtkStatusbar *statusbar,
;;;                                                         guint         context_id,
;;;                                                         gchar        *text,
;;;                                                         gpointer      user_data)       : Run Last
;;; 
;;; Is emitted whenever a new message is popped off a statusbar's stack.
;;; 
;;; statusbar :
;;; 	the object which received the signal
;;; 
;;; context_id :
;;; 	the context id of the relevant message/statusbar
;;; 
;;; text :
;;; 	the message that was just popped
;;; 
;;; user_data :
;;; 	user data set when the signal handler was connected.
;;; The "text-pushed" signal
;;; 
;;; void                user_function                      (GtkStatusbar *statusbar,
;;;                                                         guint         context_id,
;;;                                                         gchar        *text,
;;;                                                         gpointer      user_data)       : Run Last
;;; 
;;; Is emitted whenever a new message gets pushed onto a statusbar's stack.
;;; 
;;; statusbar :
;;; 	the object which received the signal
;;; 
;;; context_id :
;;; 	the context id of the relevant message/statusbar
;;; 
;;; text :
;;; 	the message that was pushed
;;; 
;;; user_data :
;;; 	user data set when the signal handler was connected.
;;; 
;;; 
(in-package :gtk)

(defcfun (statusbar-get-context-id "gtk_statusbar_get_context_id") :uint
  (statusbar (g-object statusbar))
  (context-description :string))

(defcfun gtk-statusbar-push :uint
  (statusbar (g-object statusbar))
  (context-id :uint)
  (text :string))

(defcfun gtk-statusbar-pop :void
  (statusbar (g-object statusbar))
  (context-id :uint))

(defcfun gtk-statusbar-remove :void
  (statusbar (g-object statusbar))
  (context-id :uint)
  (message-id :uint))

(defun statusbar-context-id (statusbar context)
  (etypecase context
    (integer context)
    (string (statusbar-get-context-id statusbar context))))

(defun statusbar-push (statusbar context text)
  (gtk-statusbar-push statusbar (statusbar-context-id statusbar context) text))

(defun statusbar-pop (statusbar context)
  (gtk-statusbar-pop statusbar (statusbar-context-id statusbar context)))

(defun statusbar-remove (statusbar context message-id)
  (gtk-statusbar-remove statusbar (statusbar-context-id statusbar context) message-id))

(export 'statusbar-push)
(export 'statusbar-pop)
(export 'statusbar-remove)
(export 'statusbar-context-id)
